{"version":3,"sources":["Decryption.module.css","Decryption.js","serviceWorker.js","index.js"],"names":["module","exports","re","RegExp","Decryption","state","message","descryptResult","onTextChange","e","setState","currentTarget","value","toLowerCase","edwardDecrypt","test","updateMessage","replace","onDecryptHandleClick","result","className","styles","wrapper","decryption_container","decryption_text","placeholder","onChange","this","enigma_block","onClick","result_block","result_block_text","bg_wrapper","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,4BAA4B,qBAAuB,yCAAyC,WAAa,+BAA+B,gBAAkB,oCAAoC,aAAe,iCAAiC,aAAe,iCAAiC,kBAAoB,wC,2JCE1UC,EAAK,IAAIC,OAAO,cAuDLC,E,2MAlDXC,MAAQ,CACJC,QAAS,GACTC,eAAgB,I,EAGpBC,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVJ,QAASG,EAAEE,cAAcC,MAAMC,iB,EAIvCC,cAAgB,SAACR,GAEb,GAAIJ,EAAGa,KAAKT,GAAU,CAClB,IAAMU,EAAgBV,EAAQW,QAAQf,EAAI,IAC7C,OAAO,EAAKY,cAAcE,GAE3B,OAAOV,G,EAGXY,qBAAuB,WAEnB,IAAIC,EAAS,EAAKL,cAAc,EAAKT,MAAMC,SAC3C,EAAKI,SAAS,CAACJ,QAAS,GAAIC,eAAgBY,K,wEAI5C,OACI,yBAAKC,UAAWC,IAAOC,SACnB,yBAAKF,UAAWC,IAAOE,sBACnB,yBAAKH,UAAWC,IAAOG,iBACrC,8BAAUC,YAAa,wBACKC,SAAUC,KAAKnB,aAAcI,MAAOe,KAAKtB,MAAMC,WAE7D,yBAAKc,UAAWC,IAAOO,cACnB,4BAAQC,QAASF,KAAKT,sBAAtB,aAGJ,yBAAKE,UAAWC,IAAOS,cACnB,yBAAKV,UAAWC,IAAOU,mBACnB,+CADJ,IAC8BJ,KAAKtB,MAAME,kBAIjD,yBAAKa,UAAWC,IAAOW,kB,GA9CdC,aCMLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAgBC,SAASC,eAAe,SD6HlD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM5C,a","file":"static/js/main.88a86650.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Decryption_wrapper__3i0Un\",\"decryption_container\":\"Decryption_decryption_container__1ly5f\",\"bg_wrapper\":\"Decryption_bg_wrapper__1IWI3\",\"decryption_text\":\"Decryption_decryption_text__3JHTO\",\"enigma_block\":\"Decryption_enigma_block__13Rvy\",\"result_block\":\"Decryption_result_block__2KzCf\",\"result_block_text\":\"Decryption_result_block_text__1aSZs\"};","import React, {Component} from 'react';\r\nimport styles from './Decryption.module.css';\r\n\r\nlet re = new RegExp(/([a-z])\\1/g);\r\n\r\n\r\nclass Decryption extends Component {\r\n\r\n    state = {\r\n        message: '',\r\n        descryptResult: ''\r\n    };\r\n\r\n    onTextChange = (e) => {\r\n        this.setState({\r\n            message: e.currentTarget.value.toLowerCase()\r\n        })\r\n    };\r\n\r\n    edwardDecrypt = (message) => {\r\n        debugger\r\n        if (re.test(message)) {\r\n            const updateMessage = message.replace(re, \"\");\r\n        \treturn this.edwardDecrypt(updateMessage);\r\n        }\r\n        return message;\r\n    };\r\n\r\n    onDecryptHandleClick = () => {\r\n        debugger\r\n        let result = this.edwardDecrypt(this.state.message);\r\n        this.setState({message: '', descryptResult: result})\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.wrapper}>\r\n                <div className={styles.decryption_container}>\r\n                    <div className={styles.decryption_text}>\r\n\t\t\t\t\t\t<textarea placeholder={'Enter text to decrypt'}\r\n                                  onChange={this.onTextChange} value={this.state.message}/>\r\n                    </div>\r\n                    <div className={styles.enigma_block}>\r\n                        <button onClick={this.onDecryptHandleClick}>Descrypt</button>\r\n                    </div>\r\n\r\n                    <div className={styles.result_block}>\r\n                        <div className={styles.result_block_text}>\r\n                            <h3>Result message:</h3> {this.state.descryptResult}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className={styles.bg_wrapper}></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Decryption;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Decryption from './Decryption';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Decryption />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}