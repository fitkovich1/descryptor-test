{"version":3,"sources":["Decryption.module.css","Decryption.js","serviceWorker.js","index.js"],"names":["module","exports","Decryption","state","message","descryptResult","onTextChange","e","setState","currentTarget","value","toLowerCase","edwardDecrypt","re","RegExp","replace","onDecryptHandleClick","result","className","styles","wrapper","decryption_container","decryption_text","placeholder","onChange","this","enigma_block","onClick","result_block","result_block_text","bg_wrapper","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,4BAA4B,qBAAuB,yCAAyC,WAAa,+BAA+B,gBAAkB,oCAAoC,aAAe,iCAAiC,aAAe,iCAAiC,kBAAoB,wC,2JCiD/TC,E,2MA7CdC,MAAQ,CACPC,QAAS,GACTC,eAAgB,I,EAGjBC,aAAe,SAACC,GACf,EAAKC,SAAS,CACbJ,QAASG,EAAEE,cAAcC,MAAMC,iB,EAIjCC,cAAgB,SAACR,GAChB,IAAIS,EAAK,IAAIC,OAAO,cACpB,OAAOV,EAAQW,QAAQF,EAAI,K,EAG5BG,qBAAuB,WACtB,IAAIC,EAAS,EAAKL,cAAc,EAAKT,MAAMC,SAC3C,EAAKI,SAAS,CAACJ,QAAS,GAAIC,eAAgBY,K,wEAI5C,OACC,yBAAKC,UAAWC,IAAOC,SACtB,yBAAKF,UAAWC,IAAOE,sBACtB,yBAAKH,UAAWC,IAAOG,iBACtB,8BAAUC,YAAa,wBACnBC,SAAUC,KAAKnB,aAAcI,MAAOe,KAAKtB,MAAMC,WAEpD,yBAAKc,UAAWC,IAAOO,cACtB,4BAAQC,QAASF,KAAKT,sBAAtB,aAGD,yBAAKE,UAAWC,IAAOS,cACJ,yBAAKV,UAAWC,IAAOU,mBACnB,+CADJ,IAC8BJ,KAAKtB,MAAME,kBAIjD,yBAAKa,UAAWC,IAAOW,kB,GAzCdC,aCSLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAgBC,SAASC,eAAe,SD6HlD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM5C,a","file":"static/js/main.a30057d1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Decryption_wrapper__1-mOh\",\"decryption_container\":\"Decryption_decryption_container__26HoB\",\"bg_wrapper\":\"Decryption_bg_wrapper__2HiGp\",\"decryption_text\":\"Decryption_decryption_text__1be-K\",\"enigma_block\":\"Decryption_enigma_block__2lJfR\",\"result_block\":\"Decryption_result_block__1UAxJ\",\"result_block_text\":\"Decryption_result_block_text__32hSK\"};","import React, {Component} from 'react';\nimport styles from './Decryption.module.css';\n\nclass Decryption extends Component {\n\n\tstate = {\n\t\tmessage: '',\n\t\tdescryptResult: ''\n\t};\n\n\tonTextChange = (e) => {\n\t\tthis.setState({\n\t\t\tmessage: e.currentTarget.value.toLowerCase()\n\t\t})\n\t};\n\n\tedwardDecrypt = (message) => {\n\t\tlet re = new RegExp(/([a-z])\\1/g);\n\t\treturn message.replace(re, \"\");\n\t};\n\n\tonDecryptHandleClick = () => {\n\t\tlet result = this.edwardDecrypt(this.state.message);\n\t\tthis.setState({message: '', descryptResult: result})\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className={styles.wrapper}>\n\t\t\t\t<div className={styles.decryption_container}>\n\t\t\t\t\t<div className={styles.decryption_text}>\n\t\t\t\t\t\t<textarea placeholder={'Enter text to decrypt'}\n\t\t\t\t\t\t\t\t  onChange={this.onTextChange} value={this.state.message}/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className={styles.enigma_block}>\n\t\t\t\t\t\t<button onClick={this.onDecryptHandleClick}>Descrypt</button>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className={styles.result_block}>\n                        <div className={styles.result_block_text}>\n                            <h3>Result message:</h3> {this.state.descryptResult}\n                        </div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n                <div className={styles.bg_wrapper}></div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Decryption;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Decryption from './Decryption';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Decryption />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}